"use strict";

const moment = use("moment");
const db = use("Database");

class Constant {
  async load() {
    if (!Constant._loaded) {
      await this.refresh();
    }
    return true;
  }

  async refresh() {
    const records = await db
      .from("constant_lookups")
      .select(["key", "value"])
      .where("active", true);

    Constant._data = {};
    records.forEach(record => {
      Constant._data[record.key] = record.value;
    });
    Constant._loaded = true;
  }

  get(key, defaultValue = null) {
    if (Constant._data[key] === undefined) {
      return defaultValue;
    }
    return Constant._data[key];
  }

  async set(key, value = null) {
    if (key !== null && value !== null) {
      const date = moment().format("YYYY-MM-DD H:m:s");
      let model = await db
        .table("constant_lookups")
        .select(["id", "key", "value"])
        .where("key", key)
        .first();
      if (model) {
        await db
          .table("constant_lookups")
          .select(["id", "key", "value"])
          .where("key", key)
          .update({
            value,
            active: true,
            updated_at: date
          });
      } else {
        await db.table("constant_lookups").insert({
          key,
          value,
          active: true,
          created_at: date,
          updated_at: date
        });
      }
      Constant._data[key] = value;
    }
  }

  async remove(key, softDelete = true) {
    if (key !== null) {
      if (softDelete) {
        const date = moment().format("YYYY-MM-DD H:m:s");
        await db
          .table("constant_lookups")
          .where("key", key)
          .update({
            active: false,
            updated_at: date
          });
      } else {
        await db
          .table("constant_lookups")
          .where("key", key)
          .delete();
      }
      delete Constant._data[key];
    }
  }

  get loaded() {
    return Constant._loaded === true;
  }
}

module.exports = Constant;
